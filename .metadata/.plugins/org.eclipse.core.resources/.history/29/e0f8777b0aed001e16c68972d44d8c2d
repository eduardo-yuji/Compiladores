import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

class AnalisadorLexico {
	private String input;
	private int pos;
	private int linhaNumero;

	public AnalisadorLexico(String input) {
		this.input = input;
		this.pos = 0;
		this.linhaNumero = 1;
	}

	public List<Token> tokenize() {
	    List<Token> tokens = new ArrayList<>();
	    while (pos < input.length()) {
	        char leitor = input.charAt(pos);
	        switch (leitor) {
	            case '\n':
	                pos++;
	                linhaNumero++;
	                break;
	            case '[':
	                tokens.add(new Token(TipoToken.IniDelim, "[", linhaNumero));
	                pos++;
	                break;
	            case ']':
	                tokens.add(new Token(TipoToken.FimDelim, "]", linhaNumero));
	                pos++;
	                break;
	            case '(':
	                tokens.add(new Token(TipoToken.AbrePar, "(", linhaNumero));
	                pos++;
	                break;
	            case ')':
	                tokens.add(new Token(TipoToken.FechaPar, ")", linhaNumero));
	                pos++;
	                break;
	            case '<':
	                if (pos + 1 < input.length() && input.charAt(pos + 1) == '<') {
	                    tokens.add(new Token(TipoToken.Atrib, "<<", linhaNumero));
	                    pos += 2;
	                } else if (pos + 1 < input.length() && input.charAt(pos + 1) == '>') {
	                    tokens.add(new Token(TipoToken.OpRelDif, "<>", linhaNumero));
	                    pos++;
	                } else {
	                    tokens.add(new Token(TipoToken.OpRelMenor, "<", linhaNumero));
	                    pos++;
	                }
	                break;
	            case '>':
	                if (pos + 1 < input.length() && input.charAt(pos + 1) == '=') {
	                    tokens.add(new Token(TipoToken.OpRelMaiorIgual, ">=", linhaNumero));
	                    pos += 2;
	                } else {
	                    tokens.add(new Token(TipoToken.OpRelMaior, ">", linhaNumero));
	                    pos++;
	                }
	                break;
	            case '=':
	                if (pos + 1 < input.length() && input.charAt(pos + 1) == '=') {
	                    tokens.add(new Token(TipoToken.OpRelIgual, "==", linhaNumero));
	                    pos += 2;
	                } else {
	                    tokens.add(new Token(null, "=", linhaNumero));
	                    pos++;
	                }
	                break;
	            case '+':
	                tokens.add(new Token(TipoToken.OpAritSoma, "+", linhaNumero));
	                pos++;
	                break;
	            case '-':
	                tokens.add(new Token(TipoToken.OpAritSub, "-", linhaNumero));
	                pos++;
	                break;
	            case '*':
	                tokens.add(new Token(TipoToken.OpAritMult, "*", linhaNumero));
	                pos++;
	                break;
	            case '/':
	                tokens.add(new Token(TipoToken.OpAritDiv, "/", linhaNumero));
	                pos++;
	                break;
	            case '"':
	                StringBuilder aux = new StringBuilder();
	                pos++;
	                leitor = input.charAt(pos);
	                while (leitor != '"') {
	                    aux.append(leitor);
	                    pos++;
	                    leitor = input.charAt(pos);
	                }
	                tokens.add(new Token(TipoToken.Cadeia, aux.toString(), linhaNumero));
	                pos++;
	                break;
	            default:
	                if (Character.isWhitespace(leitor)) {
	                    pos++;
	                } else if (Character.isLetter(leitor)) {
	                    if (Character.isUpperCase(leitor)) {
	                        String lexema = readWord();
	                        TipoToken tipo = getPalavraReservada(lexema);
	                        tokens.add(new Token(TipoToken.Var, lexema, linhaNumero));
	                    } else {
	                        String lexema = readWord();
	                        TipoToken tipo = getPalavraReservada(lexema);
	                        tokens.add(new Token(tipo, lexema, linhaNumero));
	                    }
	                } else if (Character.isDigit(leitor)) {
	                    String lexema = lerNumero();
	                    tokens.add(new Token(lexema.contains(".") ? TipoToken.NumReal : TipoToken.NumInt, lexema, linhaNumero));
	                } else {
	                	StringBuilder aux = new StringBuilder();
	                	aux.append(leitor);
	                	tokens.add(new Token(null, aux, linhaNumero));
	                    pos++;
	                }
	                break;
	        }
	    }
	    tokens.add(new Token(TipoToken.EOF, "", linhaNumero));
	    return tokens;
	}


	private String readWord() {
		StringBuilder builder = new StringBuilder();
		while (pos < input.length()
				&& (Character.isLetter(input.charAt(pos)) || Character.isDigit(input.charAt(pos)))) {
			builder.append(input.charAt(pos));
			pos++;
		}
		return builder.toString();
	}

	private String lerNumero() {
		StringBuilder builder = new StringBuilder();
		while (pos < input.length()
				&& (Character.isDigit(input.charAt(pos)) || input.charAt(pos) == '.')) {
			builder.append(input.charAt(pos));
			pos++;
		}
		return builder.toString();
	}

	private TipoToken getPalavraReservada(String lexema) {
		HashMap<String, TipoToken> keywords = new HashMap<>();
		keywords.put("dec", TipoToken.PCDec);
		keywords.put("prog", TipoToken.PCProg);
		keywords.put("integer", TipoToken.PCInt);
		keywords.put("float", TipoToken.PCReal);
		keywords.put("read", TipoToken.PCLer);
		keywords.put("print", TipoToken.PCImprimir);
		keywords.put("if", TipoToken.PCSe);
		keywords.put("else", TipoToken.PCSenao);
		keywords.put("then", TipoToken.PCEntao);
		keywords.put("while", TipoToken.PCEnqto);
		keywords.put("start", TipoToken.PCIni);
		keywords.put("end", TipoToken.PCFim);

		return keywords.get(lexema);
	}
}